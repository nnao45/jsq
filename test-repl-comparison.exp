#!/usr/bin/expect -f

# REPLテストスクリプト（stdin版）
set timeout 10

# テスト結果を保存する変数
set node_works 0
set bun_works 0
set deno_works 0

# 各ランタイムのREPL動作をテスト
proc test_repl_behavior {runtime} {
    puts "\n=== Testing $runtime REPL behavior ==="
    
    # stdinからJSONを渡してREPLを起動
    if {$runtime == "node"} {
        spawn sh -c "echo '{\"data\": 123}' | node dist/index.js"
    } elseif {$runtime == "bun"} {
        spawn sh -c "echo '{\"data\": 123}' | bun dist/index.js"
    } elseif {$runtime == "deno"} {
        spawn sh -c "echo '{\"data\": 123}' | deno run --allow-env --allow-read dist/index.js"
    }
    
    # REPLプロンプトを待つ
    expect {
        -timeout 5
        "> " {
            puts "✓ REPL prompt appeared"
        }
        timeout {
            puts "✗ REPL did not start properly"
            catch {close}
            wait
            return 0
        }
    }
    
    # 式を送信して結果を確認
    sleep 0.5
    send "data\n"
    
    # 結果の表示を確認
    set result_shown 0
    expect {
        -timeout 3
        "123" {
            puts "✓ Expression result displayed immediately"
            set result_shown 1
        }
        timeout {
            puts "✗ Expression result NOT displayed within timeout"
        }
    }
    
    # 次のプロンプトを確認
    expect {
        -timeout 2
        "> " {
            puts "✓ Next prompt appeared"
        }
        timeout {
            puts "✗ Next prompt did not appear"
        }
    }
    
    # もう一つ式をテスト
    send "data * 2\n"
    
    set second_result 0
    expect {
        -timeout 3
        "246" {
            puts "✓ Second expression result displayed"
            set second_result 1
        }
        timeout {
            puts "✗ Second expression result NOT displayed"
        }
    }
    
    # 終了
    send "\x03"
    expect {
        -timeout 2
        eof { }
        timeout { }
    }
    catch {close}
    wait
    
    # 結果を返す
    if {$result_shown && $second_result} {
        return 1
    } else {
        return 0
    }
}

# メイン処理
puts "Comparing REPL behavior across different runtimes..."
puts "================================================"

# Node.jsテスト
if {[catch {exec which node}] == 0} {
    set node_works [test_repl_behavior "node"]
} else {
    puts "\nNode.js not found, skipping..."
}

# Bunテスト
if {[catch {exec which bun}] == 0} {
    set bun_works [test_repl_behavior "bun"]
} else {
    puts "\nBun not found, skipping..."
}

# Denoテスト
if {[catch {exec which deno}] == 0} {
    set deno_works [test_repl_behavior "deno"]
} else {
    puts "\nDeno not found, skipping..."
}

# 結果サマリー
puts "\n================================================"
puts "REPL Behavior Summary:"
puts "================================================"

if {[catch {exec which node}] == 0} {
    if {$node_works} {
        puts "Node.js: ✅ REPL evaluation works correctly"
    } else {
        puts "Node.js: ❌ REPL evaluation has issues"
    }
}

if {[catch {exec which bun}] == 0} {
    if {$bun_works} {
        puts "Bun:     ✅ REPL evaluation works correctly"
    } else {
        puts "Bun:     ❌ REPL evaluation has issues"
    }
}

if {[catch {exec which deno}] == 0} {
    if {$deno_works} {
        puts "Deno:    ✅ REPL evaluation works correctly"
    } else {
        puts "Deno:    ❌ REPL evaluation has issues"
        puts ""
        puts "⚠️  Deno appears to have an issue with immediate evaluation in REPL mode."
        puts "   Input is echoed but results are not displayed immediately."
    }
}

puts "================================================"

# Denoで問題があれば異常終了
if {!$deno_works && [catch {exec which deno}] == 0} {
    exit 1
} else {
    exit 0
}