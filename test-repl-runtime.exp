#!/usr/bin/expect -f

# REPLテストスクリプト
set timeout 10

# テスト結果を保存する変数
set test_passed 0
set test_failed 0

# テストケースを実行するプロシージャ
proc test_runtime {runtime test_name} {
    global test_passed test_failed
    
    puts "\n=== Testing $runtime: $test_name ==="
    
    # JSONデータを準備
    set json_data "{\"test\": \"data\", \"number\": 123}"
    
    # コマンドを実行
    if {$runtime == "node"} {
        spawn sh -c "echo '$json_data' | node dist/index.js"
    } elseif {$runtime == "bun"} {
        spawn sh -c "echo '$json_data' | bun dist/index.js"
    } elseif {$runtime == "deno"} {
        spawn sh -c "echo '$json_data' | deno run --allow-env --allow-read dist/index.js"
    }
    
    # REPLプロンプトを待つ
    expect {
        -timeout 5
        ">" {
            puts "✓ REPL prompt appeared"
        }
        timeout {
            puts "✗ REPL prompt timeout"
            incr test_failed
            close
            wait
            return
        }
    }
    
    # 式を入力
    send "data.test\r"
    
    # 結果を確認
    expect {
        -timeout 3
        "\"data\"" {
            puts "✓ Expression evaluated correctly"
            incr test_passed
        }
        timeout {
            puts "✗ Expression evaluation timeout"
            incr test_failed
        }
    }
    
    # 別の式を試す
    send "data.number * 2\r"
    
    expect {
        -timeout 3
        "246" {
            puts "✓ Arithmetic expression evaluated correctly"
            incr test_passed
        }
        timeout {
            puts "✗ Arithmetic expression timeout"
            incr test_failed
        }
    }
    
    # 終了
    send "\x03"
    expect eof
    close
    wait
}

# 各ランタイムでテスト実行
puts "Starting REPL tests for different runtimes..."

# Node.jsテスト
if {[catch {exec which node}] == 0} {
    test_runtime "node" "Basic REPL functionality"
} else {
    puts "Node.js not found, skipping..."
}

# Bunテスト
if {[catch {exec which bun}] == 0} {
    test_runtime "bun" "Basic REPL functionality"
} else {
    puts "Bun not found, skipping..."
}

# Denoテスト
if {[catch {exec which deno}] == 0} {
    test_runtime "deno" "Basic REPL functionality"
} else {
    puts "Deno not found, skipping..."
}

# 結果サマリー
puts "\n=== Test Summary ==="
puts "Passed: $test_passed"
puts "Failed: $test_failed"

# エラーがあれば異常終了
if {$test_failed > 0} {
    exit 1
} else {
    exit 0
}