#!/usr/bin/expect -f

set timeout 5

# Create test data
exec echo {{"test": "value", "testing": "another", "testcase": "third"}} > /tmp/test.json

# Start jsq in prompts mode
spawn node dist/index.js --file /tmp/test.json --prompts

expect "Welcome to jsq REPL"
expect -re {\?.*>}

puts "\n=== Testing inline tab completion ==="

# Type $.t and press tab
send "$.t\t"
sleep 0.5

# Should see completion on the same line - check that $.test is shown with [1/5]
expect {
    -re {\$\.test.*\[1/5\]} {
        puts "✓ First completion shown inline"
    }
    timeout {
        puts "✗ First completion not shown inline"
    }
}

# Press tab to cycle
send "\t"
sleep 0.5

# Should still be on same line with $.testcase and [2/5]
expect {
    -re {\$\.testcase.*\[2/5\]} {
        puts "✓ Cycled to second completion inline"
    }
    timeout {
        puts "✗ Second completion not inline"
    }
}

# Press tab again
send "\t"
sleep 0.5

expect {
    -re {\$\.testing.*\[3/5\]} {
        puts "✓ Cycled to third completion inline"
    }
    timeout {
        puts "✗ Third completion not inline"
    }
}

# Type a character to clear completion
send "x"
sleep 0.2

# Check that completion status is cleared and we have $.testingx without [3/5]
expect {
    -re {\$\.testingx[[:space:]]*$} {
        puts "✓ Completion status cleared when typing"
    }
    -re {\$\.testingx.*\[3/5\]} {
        puts "✗ Completion status still visible after typing"
    }
    timeout {
        puts "✗ Completion status not cleared (timeout)"
    }
}

# Clear the line to check no extra lines
send "\x15"  ;# Ctrl+U to clear line
sleep 0.2

# Type something simple to verify we're still on the same line
send "42"
sleep 0.2

# Check that we're still in REPL without extra lines
expect {
    -re {42[[:space:]]*$} {
        puts "✓ No extra lines added during completion"
    }
    timeout {
        puts "✗ Extra lines may have been added"
    }
}

# Exit
send "\x03\x03"
expect eof

exec rm -f /tmp/test.json

puts "\n✓ Inline tab completion test completed successfully"