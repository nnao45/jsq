"use strict";(this.webpackChunkJSQ=this.webpackChunkJSQ||[]).push([[318],{318:(e,t,i)=>{i.r(t),i.d(t,{QuickJSAsyncWASMModule:()=>r});var s=i(845),n=class extends s.QM{async evalCodeAsync(e,t="eval.js",i){let n=void 0===i?1:0,a=(0,s.zV)(i),r=0;try{r=await this.memory.newHeapCharPointer(e).consume(e=>this.ffi.QTS_Eval_MaybeAsync(this.ctx.value,e.value.ptr,e.value.strlen,t,n,a))}catch(e){throw this.runtime.debugLog("QTS_Eval_MaybeAsync threw",e),e}let o=this.ffi.QTS_ResolveException(this.ctx.value,r);return o?(this.ffi.QTS_FreeValuePointer(this.ctx.value,r),this.fail(this.memory.heapValueHandle(o))):this.success(this.memory.heapValueHandle(r))}newAsyncifiedFunction(e,t){return this.newFunction(e,t)}},a=class extends s.rn{constructor(e){super(e)}newContext(e={}){let t=(0,s.tv)(e.intrinsics),i=new s.iR(this.ffi.QTS_NewContext(this.rt.value,t),void 0,e=>{this.contextMap.delete(e),this.callbacks.deleteContext(e),this.ffi.QTS_FreeContext(e)}),a=new n({module:this.module,ctx:i,ffi:this.ffi,rt:this.rt,ownedLifetimes:[],runtime:this,callbacks:this.callbacks});return this.contextMap.set(i.value,a),a}setModuleLoader(e,t){super.setModuleLoader(e,t)}setMaxStackSize(e){return super.setMaxStackSize(e)}},r=class extends s.r6{constructor(e,t){super(e,t),this.ffi=t,this.module=e}newRuntime(e={}){let t=new s.iR(this.ffi.QTS_NewRuntime(),void 0,e=>{this.callbacks.deleteRuntime(e),this.ffi.QTS_FreeRuntime(e)}),i=new a({module:this.module,ffi:this.ffi,rt:t,callbacks:this.callbacks});return(0,s.od)(i,e),e.moduleLoader&&i.setModuleLoader(e.moduleLoader),i}newContext(e={}){let t=this.newRuntime(),i=e.ownedLifetimes?e.ownedLifetimes.concat([t]):[t],s=t.newContext({...e,ownedLifetimes:i});return t.context=s,s}evalCode(){throw new s.wz("QuickJSWASMModuleAsyncify.evalCode: use evalCodeAsync instead")}evalCodeAsync(e,t){return s.HG.withScopeAsync(async i=>{let n=i.manage(this.newContext());(0,s.nS)(n.runtime,t);let a=await n.evalCodeAsync(e,"eval.js");if(void 0!==t.memoryLimitBytes&&n.runtime.setMemoryLimit(-1),a.error)throw n.dump(i.manage(a.error));return n.dump(i.manage(a.value))})}}}}]);