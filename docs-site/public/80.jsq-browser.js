"use strict";(this.webpackChunkJSQ=this.webpackChunkJSQ||[]).push([[80],{80:(e,t,s)=>{s.r(t),s.d(t,{VMEngineFactory:()=>o,getVMEngineType:()=>r});var i=s(888);class o{constructor(e){this.appContext=e}create(e){return new i.h(this.appContext)}}function r(){return"quickjs"}},888:(e,t,s)=>{s.d(t,{h:()=>r});class i{serialize(e){return null===e?{type:"null",value:null}:void 0===e?{type:"undefined",value:void 0}:"function"==typeof e?{type:"function",value:e.toString(),metadata:{name:e.name}}:Array.isArray(e)?{type:"array",value:e}:"object"==typeof e?{type:"object",value:e}:{type:"primitive",value:e}}deserialize(e){const{type:t,value:s}=e;switch(t){case"null":return null;case"undefined":return;case"primitive":case"object":case"array":return s;case"function":return`[Function: ${e.metadata?.name||"anonymous"}]`;default:throw new Error(`Cannot deserialize type: ${t}`)}}}class o{constructor(e,t,s){this.vm=e,this.runtime=t,this.handles=[]}async setGlobal(e,t){if(null==t){const s=null===t?this.vm.null:this.vm.undefined;return void this.vm.setProp(this.vm.global,e,s)}if("string"==typeof t){const s=this.vm.newString(t);return this.vm.setProp(this.vm.global,e,s),void s.dispose()}if("number"==typeof t){const s=this.vm.newNumber(t);return this.vm.setProp(this.vm.global,e,s),void s.dispose()}if("boolean"==typeof t){const s=t?this.vm.true:this.vm.false;return void this.vm.setProp(this.vm.global,e,s)}if(t instanceof Date){const s=`new Date('${t.toISOString()}')`,i=this.vm.evalCode(s);if("error"in i&&i.error){const t=this.vm.dump(i.error);throw i.error.dispose(),new Error(`Failed to create Date for global ${e}: ${t}`)}return void("value"in i&&(this.vm.setProp(this.vm.global,e,i.value),i.value.dispose()))}const s=JSON.stringify(t),i=this.vm.global,o=this.vm.newString(s),r=this.vm.getProp(i,"JSON"),n=this.vm.getProp(r,"parse"),a=this.vm.callFunction(n,r,o);if(o.dispose(),n.dispose(),r.dispose(),"error"in a&&a.error){const t=this.vm.dump(a.error);let s;throw a.error.dispose(),s="object"==typeof t&&null!==t?`${t.name||"Error"}: ${t.message||"Unknown error"}`:String(t),new Error(`Failed to parse JSON for global ${e}: ${s}`)}"value"in a&&(this.vm.setProp(i,e,a.value),a.value.dispose())}async eval(e,t){const s=this.vm.evalCode(e,t?.filename);if("error"in s&&s.error){let t="Unknown error",i="",o="Unknown";try{const e=this.vm.getProp(s.error,"name");"string"===this.vm.typeof(e)&&(o=this.vm.getString(e)),e.dispose()}catch(e){}try{const e=null!=s.error?this.vm.dump(s.error):null;e&&"object"==typeof e?("message"in e&&(t=e.message||t),"stack"in e&&(i=e.stack||""),t=JSON.stringify(e)):"string"==typeof e&&(t=e)}catch(e){try{const e=this.vm.getProp(s.error,"message");"string"===this.vm.typeof(e)&&(t=this.vm.getString(e)),e.dispose()}catch(e){}}s.error&&s.error.dispose();const r=e.length>100?`${e.substring(0,100)}...`:e;throw new Error(`${o}: ${t}\nCode: ${r}${i?`\nStack: ${i}`:""}`)}if(!("value"in s)||!s.value)throw new Error("No result value from eval");let i=-1;for(let e=0;e<100;e++){const e=this.runtime.executePendingJobs();if("error"in e&&e.error)throw"value"in s&&s.value.dispose(),e.error.dispose(),e.dispose(),new Error("Error executing pending jobs");const t="value"in e?e.value:0;if(e.dispose(),0===t)break;if(t===i)break;i=t}try{if("value"in s){const e=this.vm.dump(s.value);return s.value.dispose(),e}throw new Error("No value in result")}catch(e){throw"value"in s&&s.value.dispose(),e instanceof Error&&e.message.includes("Lifetime not alive")?new Error("Failed to resolve async operation: Promise may have been resolved but handle was disposed"):new Error(`Failed to dump result: ${e}`)}}release(){if(this.vm)try{const e="\n          if (typeof globalThis.__consoleCalls !== 'undefined') {\n            globalThis.__consoleCalls = null;\n            delete globalThis.__consoleCalls;\n          }\n        ",t=this.vm.evalCode(e);"error"in t&&t.error?t.error.dispose():"value"in t&&t.value&&t.value.dispose()}catch{}const e=[...this.handles];this.handles=[];for(let t=e.length-1;t>=0;t--){const s=e[t];try{s&&"function"==typeof s.dispose&&s.dispose()}catch{}}if(this.vm&&"function"==typeof this.vm.dispose)try{this.vm.dispose()}catch{}this.vm=void 0}}class r{constructor(e){this.quickjs=null,this.runtime=null,this.config=null,this.marshaller=new i,this.activeContexts=[],this.appContext=e}async initialize(e){this.config=e,this.quickjs=await this.appContext.getQuickJSModule(),this.runtime=this.quickjs.newRuntime(),e.memoryLimit&&this.runtime.setMemoryLimit(1024*e.memoryLimit*1024),this.runtime.setMaxStackSize(1048576)}async createContext(){if(!this.quickjs||!this.runtime)throw new Error("Engine not initialized");const e=this.runtime.newContext();try{const t="\n        globalThis.__consoleCalls = [];\n        globalThis.console = {\n          log: function(...args) {\n            globalThis.__consoleCalls.push({ method: 'log', args: args });\n          },\n          error: function(...args) {\n            globalThis.__consoleCalls.push({ method: 'error', args: args });\n          },\n          warn: function(...args) {\n            globalThis.__consoleCalls.push({ method: 'warn', args: args });\n          },\n          info: function(...args) {\n            globalThis.__consoleCalls.push({ method: 'info', args: args });\n          },\n          debug: function(...args) {\n            globalThis.__consoleCalls.push({ method: 'debug', args: args });\n          }\n        };\n      ",s=e.evalCode(t);"error"in s&&s.error?s.error.dispose():"value"in s&&s.value&&s.value.dispose()}catch{}const t=new o(e,this.runtime,this.marshaller);return this.activeContexts.push(t),t}async execute(e,t,s,i){const o=performance.now();for(const[t,i]of Object.entries(s))await e.setGlobal(t,i);let r=null;i.timeout&&(r=setTimeout(()=>{},i.timeout));try{return{value:await e.eval(t),executionTime:performance.now()-o,memoryUsed:this.getMemoryUsage().used}}finally{r&&clearTimeout(r)}}getMemoryUsage(){if(!this.runtime)return{used:0,limit:0};const e=this.runtime.computeMemoryUsage();let t;return t="number"==typeof e?{used:e,limit:this.config?.memoryLimit||0}:{used:(e&&"object"==typeof e&&"memory_used_size"in e?e.memory_used_size:0)||0,limit:this.config?.memoryLimit||0,external:e&&"object"==typeof e&&"malloc_size"in e?e.malloc_size:0},e&&"object"==typeof e&&"dispose"in e&&"function"==typeof e.dispose&&e.dispose(),t}async dispose(){if(void 0!==process.exitCode)return;const e=[...this.activeContexts];if(this.activeContexts=[],this.runtime){try{const e=this.runtime.executePendingJobs();"dispose"in e&&"function"==typeof e.dispose&&e.dispose()}catch{}try{"collectGarbage"in this.runtime&&"function"==typeof this.runtime.collectGarbage&&this.runtime.collectGarbage()}catch{}for(const t of e)try{t.release()}catch{}try{this.runtime.dispose()}catch(e){if(e&&"object"==typeof e&&"message"in e&&!String(e.message).includes("Assertion failed: list_empty(&rt->gc_obj_list)"))throw e}this.runtime=null}this.quickjs=null,this.config=null}}}}]);