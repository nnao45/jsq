"use strict";(this.webpackChunkJSQ=this.webpackChunkJSQ||[]).push([[525],{525:(e,n,t)=>{t.r(n),t.d(n,{VMSandboxQuickJS:()=>i});var r=t(888);class o{constructor(e,n,t=4,r=100){this.pool=[],this.appContext=e,this.config=n,this.maxPoolSize=t,this.maxUseCount=r}async acquire(){const e=this.pool.find(e=>!e.inUse&&e.useCount<this.maxUseCount);if(e)return e.inUse=!0,e.lastUsed=Date.now(),e.useCount++,await this.resetContext(e.context),{engine:e.engine,execContext:e.execContext};if(this.pool.length<this.maxPoolSize){const e=await this.createNewVM();return this.pool.push(e),{engine:e.engine,execContext:e.execContext}}const n=new r.h(this.appContext);await n.initialize(this.config);const t=await n.createContext();return{engine:n,execContext:t}}release(e){const n=this.pool.find(n=>n.engine===e);n?(n.inUse=!1,n.lastUsed=Date.now(),n.useCount>=this.maxUseCount&&(this.disposeVM(n),this.pool=this.pool.filter(e=>e!==n))):e.dispose()}async createNewVM(){const e=new r.h(this.appContext);await e.initialize(this.config);const n=await e.createContext();return{engine:e,runtime:e.runtime,context:n.vm,execContext:n,inUse:!0,lastUsed:Date.now(),useCount:1}}async resetContext(e){try{const n="\n        // Clear console calls\n        if (typeof globalThis.__consoleCalls !== 'undefined') {\n          globalThis.__consoleCalls = [];\n        }\n        \n        // Clear SmartDollar-related globals explicitly\n        // Use a more thorough cleanup approach\n        const smartDollarGlobals = [\n          'smartDollarModule',\n          'createSmartDollar', \n          'SmartDollar',\n          '$',\n          '_',\n          '__objectMethodsOverridden',\n          '__result__',\n          'smartDollarMethods'\n        ];\n        \n        smartDollarGlobals.forEach(key => {\n          try {\n            if (typeof globalThis[key] !== 'undefined') {\n              delete globalThis[key];\n            }\n          } catch (e) {\n            // Some properties might be non-configurable\n            try {\n              globalThis[key] = undefined;\n            } catch {}\n          }\n        });\n        \n        // Reset Object method overrides\n        if (typeof Object.__originalKeys !== 'undefined') {\n          Object.keys = Object.__originalKeys;\n          delete Object.__originalKeys;\n        }\n        if (typeof Object.__originalValues !== 'undefined') {\n          Object.values = Object.__originalValues;\n          delete Object.__originalValues;\n        }\n        if (typeof Object.__originalEntries !== 'undefined') {\n          Object.entries = Object.__originalEntries;\n          delete Object.__originalEntries;\n        }\n        \n        // Clear any user-defined globals\n        const userGlobals = Object.keys(globalThis).filter(key => {\n          const builtins = ['Object', 'Function', 'Array', 'String', 'Boolean', 'Number',\n            'Date', 'RegExp', 'Error', 'Math', 'JSON', 'Promise', 'Symbol', 'Map', 'Set',\n            'WeakMap', 'WeakSet', 'ArrayBuffer', 'DataView', 'Int8Array', 'Uint8Array',\n            'Uint8ClampedArray', 'Int16Array', 'Uint16Array', 'Int32Array', 'Uint32Array',\n            'Float32Array', 'Float64Array', 'undefined', 'null', 'Infinity', 'NaN',\n            'console', 'globalThis', 'eval', 'parseInt', 'parseFloat', 'isNaN', 'isFinite',\n            'decodeURI', 'decodeURIComponent', 'encodeURI', 'encodeURIComponent'];\n          return !builtins.includes(key);\n        });\n        \n        userGlobals.forEach(key => {\n          try { \n            delete globalThis[key]; \n          } catch {\n            try {\n              globalThis[key] = undefined;\n            } catch {}\n          }\n        });\n      ",t=e.evalCode(n);"error"in t&&t.error?t.error.dispose():"value"in t&&t.value&&t.value.dispose()}catch{}try{e.runtime.executePendingJobs()}catch{}}disposeVM(e){try{e.engine.dispose()}catch{}}async dispose(){for(const e of this.pool)this.disposeVM(e);this.pool=[]}getPoolStats(){const e=this.pool.filter(e=>!e.inUse).length,n=this.pool.filter(e=>e.inUse).length;return{totalVMs:this.pool.length,availableVMs:e,inUseVMs:n}}}var a=t(80);class i{constructor(e,n={}){if(this.appContext=e,this.config={memoryLimit:this.validatePositiveNumber(n.memoryLimit,128),timeout:this.validatePositiveNumber(n.timeout,3e4),enableAsync:n.enableAsync??!0,enableGenerators:n.enableGenerators??!1,enableProxies:n.enableProxies??!1,enableSymbols:n.enableSymbols??!0,maxContextSize:this.validatePositiveNumber(n.maxContextSize,10485760),recycleIsolates:n.recycleIsolates??!1,isolatePoolSize:this.validatePositiveNumber(n.isolatePoolSize,1)},this.useVMPool="true"!==process.env.DISABLE_VM_POOL&&!0,this.useVMPool&&!i.vmPool){const n="undefined"!=typeof globalThis&&globalThis.navigator?.hardwareConcurrency?globalThis.navigator.hardwareConcurrency:4,t=Math.min(Math.floor(n/2),8);i.vmPool=new o(e,this.config,t,100)}}async execute(e,n={},r={}){let o=null,s=null;const l=process.env.DEBUG&&!1;try{if(this.useVMPool&&i.vmPool){const e=await i.vmPool.acquire();s=e.engine,o=e.execContext}else s=new a.VMEngineFactory(this.appContext).create("quickjs"),await s.initialize(this.config),o=await s.createContext();const c=n.console||r.enableConsole,u=n.console||{log:(...e)=>console.log(...e),error:(...e)=>console.error(...e),warn:(...e)=>console.warn(...e),info:(...e)=>console.info(...e),debug:(...e)=>console.debug(...e)};if(c)try{await o.eval("\n            globalThis.console = {\n              log: function(...args) {\n                // Convert args to a format that can be passed back to host\n                const serializedArgs = args.map(arg => {\n                  if (typeof arg === 'object' && arg !== null) {\n                    try { return JSON.stringify(arg); } catch { return String(arg); }\n                  }\n                  return String(arg);\n                });\n                // Store for later processing\n                if (!globalThis.__consoleCalls) globalThis.__consoleCalls = [];\n                globalThis.__consoleCalls.push({ method: 'log', args: serializedArgs });\n                return undefined;\n              },\n              error: function(...args) {\n                const serializedArgs = args.map(arg => {\n                  if (typeof arg === 'object' && arg !== null) {\n                    try { return JSON.stringify(arg); } catch { return String(arg); }\n                  }\n                  return String(arg);\n                });\n                if (!globalThis.__consoleCalls) globalThis.__consoleCalls = [];\n                globalThis.__consoleCalls.push({ method: 'error', args: serializedArgs });\n                return undefined;\n              },\n              warn: function(...args) {\n                const serializedArgs = args.map(arg => {\n                  if (typeof arg === 'object' && arg !== null) {\n                    try { return JSON.stringify(arg); } catch { return String(arg); }\n                  }\n                  return String(arg);\n                });\n                if (!globalThis.__consoleCalls) globalThis.__consoleCalls = [];\n                globalThis.__consoleCalls.push({ method: 'warn', args: serializedArgs });\n                return undefined;\n              },\n              info: function(...args) {\n                const serializedArgs = args.map(arg => {\n                  if (typeof arg === 'object' && arg !== null) {\n                    try { return JSON.stringify(arg); } catch { return String(arg); }\n                  }\n                  return String(arg);\n                });\n                if (!globalThis.__consoleCalls) globalThis.__consoleCalls = [];\n                globalThis.__consoleCalls.push({ method: 'info', args: serializedArgs });\n                return undefined;\n              },\n              debug: function(...args) {\n                const serializedArgs = args.map(arg => {\n                  if (typeof arg === 'object' && arg !== null) {\n                    try { return JSON.stringify(arg); } catch { return String(arg); }\n                  }\n                  return String(arg);\n                });\n                if (!globalThis.__consoleCalls) globalThis.__consoleCalls = [];\n                globalThis.__consoleCalls.push({ method: 'debug', args: serializedArgs });\n                return undefined;\n              }\n            };\n          ")}catch(e){}let g=!1;for(const[e,t]of Object.entries(n))["JSON","Math","Date","Array","Object","String","Number","Boolean","console"].includes(e)||("$"===e?await this.setupSmartDollar(o,t):"_"===e?g=!0:await o.setGlobal(e,t));if(g){const{createVMLodashCode:e}=await t.e(674).then(t.bind(t,674)),n=e();await o.eval(n),l&&await o.eval("typeof globalThis._")}const h=this.wrapCode(e),d=await s.execute(o,h,{},{...r,timeout:r.timeout??this.config.timeout});if(c)try{const e=await o.eval("globalThis.__consoleCalls");if(Array.isArray(e))for(const n of e)if(n&&"object"==typeof n&&"method"in n&&"args"in n){const e=n,t=e.method;"log"!==t&&"error"!==t&&"warn"!==t&&"info"!==t&&"debug"!==t||Array.isArray(e.args)&&u[t](...e.args)}}catch(e){}let b=d.value;if(null!=b&&"object"==typeof b)try{const e="\n            (function(obj) {\n              if (obj && obj.__isSmartDollar) {\n                return obj._value || obj.value;\n              }\n              return obj;\n            })(globalThis.__result__)\n          ";await o.setGlobal("__result__",b),b=await o.eval(e),await o.eval("delete globalThis.__result__")}catch(e){}try{await o.eval("\n          delete globalThis.__result__;\n          delete globalThis.__consoleCalls;\n        ")}catch(e){}return{value:b,executionTime:d.executionTime,memoryUsed:d.memoryUsed||0}}catch(e){if(e instanceof Error&&(e.message.includes("dynamic import callback")||e.message.includes("experimental-vm-modules")||e.message.includes("ERR_VM_DYNAMIC_IMPORT_CALLBACK_MISSING_FLAG"))){const e=new Error("QuickJS initialization failed: Dynamic imports are not supported in the current Jest environment. QuickJS requires --experimental-vm-modules flag which may not be compatible with your Node.js version. Run tests with NODE_OPTIONS=--experimental-vm-modules.");throw this.createSandboxError(e,0)}throw this.createSandboxError(e,0)}finally{if(s)if(this.useVMPool&&i.vmPool)i.vmPool.release(s);else try{await s.dispose()}catch{}}}async setupSmartDollar(e,n){let r;r=Array.isArray(n)?[...n]:"function"==typeof n?n.valueOf?n.valueOf():n():n;const{createVMSmartDollarCodeV2:o}=await t.e(247).then(t.bind(t,247)),a=`\n      // Check if smartDollarModule already exists to avoid redefinition\n      if (typeof globalThis.smartDollarModule === 'undefined') {\n        globalThis.smartDollarModule = ${o()};\n      }\n      \n      // Use existing module or extract from newly created one\n      // Use IIFE to avoid const redeclaration issues\n      (function() {\n        const { createSmartDollar, SmartDollar } = globalThis.smartDollarModule;\n        const $_data = ${JSON.stringify(r)};\n        \n        // Store SmartDollar class and creator globally for cleanup and method access\n        if (typeof globalThis.SmartDollar === 'undefined') {\n          globalThis.SmartDollar = SmartDollar;\n        }\n        if (typeof globalThis.createSmartDollar === 'undefined') {\n          globalThis.createSmartDollar = createSmartDollar;\n        }\n      \n        // Only override Object methods if not already overridden\n        if (!globalThis.__objectMethodsOverridden) {\n          // Save original methods\n          Object.__originalKeys = Object.keys;\n          Object.__originalValues = Object.values;\n          Object.__originalEntries = Object.entries;\n          \n          // Override Object.keys to handle SmartDollar objects\n          Object.keys = function(obj) {\n            if (obj && obj.__isSmartDollar && obj._value !== null && obj._value !== undefined) {\n              return Object.__originalKeys(obj._value);\n            }\n            return Object.__originalKeys(obj);\n          };\n          \n          // Override Object.values to handle SmartDollar objects\n          Object.values = function(obj) {\n            if (obj && obj.__isSmartDollar && obj._value !== null && obj._value !== undefined) {\n              return Object.__originalValues(obj._value);\n            }\n            return Object.__originalValues(obj);\n          };\n          \n          // Override Object.entries to handle SmartDollar objects\n          Object.entries = function(obj) {\n            if (obj && obj.__isSmartDollar && obj._value !== null && obj._value !== undefined) {\n              return Object.__originalEntries(obj._value);\n            }\n            return Object.__originalEntries(obj);\n          };\n          \n          globalThis.__objectMethodsOverridden = true;\n        }\n        \n        // Create SmartDollar instance\n        if ($_data === null || $_data === undefined) {\n          globalThis.$ = $_data;\n        } else {\n          // Always use Proxy-based SmartDollar for consistent behavior\n          globalThis.$ = createSmartDollar($_data);\n        }\n      })();\n    `;await e.eval(a)}wrapCode(e){const n=e.trim();if(e.includes("await")||e.includes("async")||e.includes("Promise."))return`(async () => {\n        try {\n          const result = ${e};\n          // Unwrap SmartDollar if needed\n          if (result && result.__isSmartDollar) {\n            return result._value || result.value;\n          }\n          return result;\n        } catch (e) {\n          throw e;\n        }\n      })()`;if(/^\s*(const|let|var|function|class|if|for|while|do|switch)\s+/.test(n)||/;\s*$/.test(n)){const t=[];let r="",o=!1,a=null,i=0;for(let e=0;e<n.length;e++){const s=n[e],l=e>0?n[e-1]:"";o||'"'!==s&&"'"!==s&&"`"!==s?o&&s===a&&"\\"!==l&&(o=!1):(o=!0,a=s),o||("("!==s&&"{"!==s&&"["!==s||i++,")"!==s&&"}"!==s&&"]"!==s||i--,";"!==s||0!==i)?r+=s:(t.push(r.trim()),r="")}if(r.trim()&&t.push(r.trim()),t.length>1){const e=t[t.length-1];if(e&&!e.startsWith("const ")&&!e.startsWith("let ")&&!e.startsWith("var ")&&!e.startsWith("function ")&&!e.startsWith("class ")&&!e.startsWith("if ")&&!e.startsWith("for ")&&!e.startsWith("while ")&&!e.startsWith("return "))return`(() => {\n              try {\n                ${t.slice(0,-1).join(";\n")};\n                return (${e});\n              } catch (error) {\n                if (error instanceof Error) {\n                  throw new Error(error.message);\n                }\n                throw error;\n              }\n            })()`}return`(() => {\n          try {\n            ${e}\n          } catch (error) {\n            if (error instanceof Error) {\n              throw new Error(error.message);\n            }\n            throw error;\n          }\n        })()`}return`(() => {\n          try {\n            return (${e});\n          } catch (error) {\n            if (error instanceof Error) {\n              throw new Error(error.message);\n            }\n            throw error;\n          }\n        })()`}createSandboxError(e,n){let t="EXECUTION_ERROR",r="Unknown error";e instanceof Error?(r=e.message,"TimeoutError"===e.name&&(t="TIMEOUT")):"string"==typeof e&&(r=e);const o=r.toLowerCase();o.includes("timeout")||o.includes("timed out")?t="TIMEOUT":o.includes("memory")?t="MEMORY_LIMIT":o.includes("syntax")?t="SYNTAX_ERROR":o.includes("reference")||o.includes("is not defined")?t="REFERENCE_ERROR":o.includes("type")&&(t="TYPE_ERROR");const a=new Error(r);return a.code=t,a.details={executionTime:n},a.name="SandboxError",a}async dispose(){this.useVMPool&&i.vmPool&&(await i.vmPool.dispose(),i.vmPool=null)}getConfig(){return{...this.config}}getCapabilities(){return{console:!0,json:!0,math:!0,array:!0,object:!0,promises:this.config.enableAsync,generators:this.config.enableGenerators,proxies:this.config.enableProxies,symbols:this.config.enableSymbols,buffer:!1,crypto:!1,timers:!1,weakmap:!0,intl:!1,number:!0}}getPoolStatus(){return{size:0,maxSize:0,available:0,busy:0}}validateContextValue(e){try{const n=this.estimateValueSize(e);return n>this.config.maxContextSize?{valid:!1,error:`Context value too large: ${n} bytes > ${this.config.maxContextSize} bytes`}:{valid:!0}}catch(e){return{valid:!1,error:`Validation error: ${e instanceof Error?e.message:"Unknown error"}`}}}estimateValueSize(e,n=new Set){if(null==e)return 8;if("object"==typeof e&&null!==e&&n.has(e))return 8;switch(typeof e){case"boolean":return 4;case"number":default:return 8;case"string":return 2*e.length;case"bigint":case"function":return 2*e.toString().length;case"object":{if(n.has(e))return 8;n.add(e);let t=16;if(Array.isArray(e))for(const r of e)t+=this.estimateValueSize(r,n);else if(e instanceof Date)t+=8;else if(e instanceof RegExp)t+=2*e.toString().length;else if(e instanceof Map)for(const[r,o]of e)t+=this.estimateValueSize(r,n),t+=this.estimateValueSize(o,n);else if(e instanceof Set)for(const r of e)t+=this.estimateValueSize(r,n);else for(const[r,o]of Object.entries(e))t+=2*r.length,t+=this.estimateValueSize(o,n);return n.delete(e),t}}}validatePositiveNumber(e,n){return"number"==typeof e&&e>0&&!Number.isNaN(e)?e:n}}i.vmPool=null}}]);