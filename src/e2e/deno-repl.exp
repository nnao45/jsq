#!/usr/bin/expect -f

# Denoを使用したREPLモードのE2Eテスト

# テストの説明を出力
puts "\n=== Deno REPL Mode E2E Test ==="
puts "Denoでjsq のREPLモードを実行し、基本的な機能をテストします"
puts "================================\n"

# タイムアウト設定
set timeout 10

# Denoでjsqを実行
spawn -noecho deno run --allow-read --allow-write --allow-env --allow-net dist/index-deno.js

# REPLプロンプトを待つ
expect {
    "> " { puts "✓ REPLプロンプトが表示されました" }
    timeout { 
        puts "✗ REPLプロンプトが表示されませんでした"
        exit 1 
    }
}

# 1. 基本的な計算のテスト
puts "\n\[TEST 1\] Basic calculation"
send "10 / 2\r"
expect {
    "5" { puts "✓ 10 / 2 = 5 が正しく計算されました" }
    timeout { 
        puts "✗ 計算結果が正しくありません"
        exit 1 
    }
}
expect "> "

# 2. 文字列のテスト（Denoの特徴的な機能）
puts "\n\[TEST 2\] Template literal"
send "`Deno version: \${1 + 0.3}\`\r"
expect {
    "Deno version: 1.3" { puts "✓ テンプレートリテラルが正しく動作しました" }
    timeout { 
        puts "✗ テンプレートリテラルが正しくありません"
        exit 1 
    }
}
expect "> "

# 3. Set操作のテスト
puts "\n\[TEST 3\] Set operation"
send "new Set(\[1, 2, 2, 3\])\r"
expect {
    "Set" { 
        expect {
            "1" {
                expect {
                    "2" {
                        expect {
                            "3" { puts "✓ Setが正しく作成されました（重複排除）" }
                        }
                    }
                }
            }
        }
    }
    timeout { 
        puts "✗ Setが正しく作成されませんでした"
        exit 1 
    }
}
expect "> "

# 4. Map操作のテスト
puts "\n\[TEST 4\] Map operation"
send "new Map(\[\[\"deno\", \"🦕\"\], \[\"node\", \"🟢\"\]\])\r"
expect {
    "Map" { 
        expect {
            "deno" {
                expect {
                    "🦕" { puts "✓ Mapが正しく作成されました" }
                }
            }
        }
    }
    timeout { 
        puts "✗ Mapが正しく作成されませんでした"
        exit 1 
    }
}
expect "> "

# 5. TypeErrorのテスト
puts "\n\[TEST 5\] TypeError handling"
send "null.property\r"
expect {
    "TypeError" { puts "✓ TypeErrorが正しく表示されました" }
    timeout { 
        puts "✗ エラーが正しく表示されませんでした"
        exit 1 
    }
}
expect "> "

# 6. Promise.allのテスト
puts "\n\[TEST 6\] Promise.all functionality"
send "await Promise.all(\[Promise.resolve(1), Promise.resolve(2)\])\r"
expect {
    "\[ 1, 2 \]" { puts "✓ Promise.allが正しく動作しました" }
    timeout { 
        puts "✗ Promise.allが正しく動作しませんでした"
        exit 1 
    }
}
expect "> "

# 7. 複数行入力のテスト（新しいREPLでは即座に評価されるためスキップ）
puts "\n\[TEST 7\] Multi-line input - skipped for new REPL"
puts "✓ 新しいREPLでは即時評価モードのためスキップ"

# 8. 正常終了のテスト
puts "\n\[TEST 8\] Normal termination"
# 新しいREPLでは空行でCtrl+Cすると終了
send "\003"  ;# Ctrl+C
expect {
    eof { puts "✓ Ctrl+Cで正常に終了しました" }
    timeout { 
        puts "✗ 正常に終了しませんでした"
        exit 1 
    }
}

puts "\n=== 全てのDeno REPLテストが成功しました！ ===\n"
exit 0