#!/usr/bin/expect -f

set timeout 5

proc test_runtime {runtime} {
    puts "\n=== Testing $runtime ==="
    
    # Start jsq with test data
    if {$runtime eq "node"} {
        spawn sh -c "echo '{\"test\": \"data\"}' | node dist/index.js"
    } elseif {$runtime eq "bun"} {
        spawn sh -c "echo '{\"test\": \"data\"}' | bun run dist/index.js"
    } else {
        spawn sh -c "echo '{\"test\": \"data\"}' | deno run --allow-env --allow-read dist/index.js"
    }
    
    # Wait for REPL prompt
    expect {
        "> " {
            puts "✓ REPL started"
        }
        timeout {
            puts "✗ REPL failed to start"
            exit 1
        }
    }
    
    # Send expression character by character
    send "1"
    expect {
        -re ".*" {
            set buffer $expect_out(buffer)
            if {[string match "*1*" $buffer]} {
                puts "✓ First character echoed"
            } else {
                puts "✗ First character not echoed"
            }
        }
    }
    
    # Check for immediate evaluation
    expect {
        -re "1\r\n" {
            puts "✓ Immediate evaluation occurred"
        }
        timeout {
            puts "✗ No immediate evaluation"
        }
    }
    
    # Continue typing
    send "23"
    
    # Check for updated evaluation
    expect {
        -re "123\r\n" {
            puts "✓ Expression evaluated to 123"
        }
        timeout {
            puts "✗ Expression not evaluated"
        }
    }
    
    # Exit
    send "\003"  ;# Ctrl+C
    expect eof
}

# Test each runtime
foreach runtime {node bun deno} {
    if {[catch {exec which $runtime}]} {
        puts "Skipping $runtime (not installed)"
    } else {
        test_runtime $runtime
    }
}